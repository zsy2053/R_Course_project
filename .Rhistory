# compute returns
#
# simple 1-month returns
n = nrow(sbuxPrices.df)
sbux.ret = (sbuxPrices.df[2:n,1] - sbuxPrices.df[1:(n-1),1])/sbuxPrices.df[1:(n-1),1]
# notice that sbux.ret is not a data.frame object
class(sbux.ret)
# now add dates as names to the vector.
names(sbux.ret) = rownames(sbuxPrices.df)[2:n]
head(sbux.ret)
# Note: to ensure that sbux.ret is a data.frame use drop=FALSE when computing returns
sbux.ret.df = (sbuxPrices.df[2:n,1,drop=FALSE] - sbuxPrices.df[1:(n-1),1,drop=FALSE])/sbuxPrices.df[1:(n-1),1,drop=FALSE]
# continuously compounded 1-month returns
sbux.ccret = log(1 + sbux.ret)
# alternatively
sbux.ccret = log(sbuxPrices.df[2:n,1]) - log(sbuxPrices.df[1:(n-1),1])
names(sbux.ccret) = rownames(sbuxPrices.df)[2:n]
head(sbux.ccret)
# compare the simple and cc returns
head(cbind(sbux.ret, sbux.ccret))
# plot the simple and cc returns in separate graphs
# split screen into 2 rows and 1 column
par(mfrow=c(2,1))
# plot simple returns first
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",
main="Monthly Simple Returns on SBUX")
abline(h=0)
# next plot the cc returns
plot(sbux.ccret, type="l", col="blue", lwd=2, ylab="Return",
main="Monthly Continuously Compounded Returns on SBUX")
abline(h=0)
# reset the screen to 1 row and 1 column
par(mfrow=c(1,1))
# plot the returns on the same graph
plot(sbux.ret, type="l", col="blue", lwd=2, ylab="Return",
main="Monthly Returns on SBUX")
# add horizontal line at zero
abline(h=0)
# add the cc returns
lines(sbux.ccret, col="red", lwd=2)
# add a legend
legend(x="bottomright", legend=c("Simple", "CC"),
lty=1, lwd=2, col=c("blue","red"))
#
# calculate growth of $1 invested in SBUX
#
# compute gross returns
sbux.gret = 1 + sbux.ret
# compute future values
sbux.fv = cumprod(sbux.gret)
plot(sbux.fv, type="l", col="blue", lwd=2, ylab="Dollars",
main="FV of $1 invested in SBUX")
r.msft = c(-0.3, 0, 0.1, 0.2, 0.5)
prob.vals = c(0.05, 0.20, 0.50, 0.20, 0.05)
barplot(prob.vals, names.arg = as.character(r.msft), xlab="return")
title("Annual Return on Microsoft")
plot(r.msft, prob.vals, type="h", lwd=4, xlab="return", ylab="probability")
points(r.msft, prob.vals, pch=16, cex=2, col="blue")
axis(1, at=r.msft)
# plot cdf of discrete distribution
cdf = c(0, 0.05, 0.25, 0.75, 0.95, 1)
x.vals = c(-0.4, -0.3, 0, 0.1, 0.2, 0.5)
plot(x.vals, cdf, lwd=4, type="S")
axis(1, at=x.vals)
# econ424lab1.r
#
# author: E. Zivot
# created: September 24, 2009
# revision history:
# June 27, 2011
#   updated code for Summer 2011
#
#
# R functions used
#
# as.Date()			coerce to Date object
# as.numeric()		coerce to numeric object
# class()			return or set class of object
# colnames()		extract column names
# format()			format output
# head()			show fist few rows of data object
# read.csv()		read comma separated file into R
# rownames()
# seq()			create sequence
# tail()			show last few rows of data object
#
# set output options to show only 4 significant digits
options(digits = 4)
#
# read .csv files containing Yahoo! monthly adjusted closing price data on sbux
# from March, 1993 through March 2008. The files sbuxPrices.csv is
# assumed to be in the directory C:\Users\ezivot\Documents\classes\econ424\fall2009.
# Change to the appropriate directory where you have saved the data.
#
# read the sbux prices into a data.frame object. First look at the online help file
# for read.csv
?read.csv
# now read in the data - make sure to change the path to where the data is on your
# system
sbux.df = read.csv(file="../data/sbuxPrices.csv",
header=TRUE, stringsAsFactors=FALSE)
# sbux.df is a data.frame object. Data.frames are rectangular data objects typically with
# observations in rows and variables in columns
class(sbux.df)
str(sbux.df)
head(sbux.df)
tail(sbux.df)
colnames(sbux.df)
class(sbux.df$Date)
class(sbux.df$Adj.Close)
?pnorm
cor(impact.row$memory.vismotor[impact.row$test=="A"], impact.row$memory,vismotor[impact.row$test=="B"])
# Statistics One, lecture 6.2
# Test/retest reliability analysis in R
# (row format)
library(psych)
#read data
impact.row<-read.table("data/stats.ex.03.row.txt", header=TRUE)
# list names of variables
names(impact.row)
describe.by(impact.row, impact.row$test)
# Correlations (TestA and TestB)
cor(impact.row$memory.verbal[impact.row$test=="A"], impact.row$memory,verbal[impact.row$test=="B"])
cor(impact.row$memory.visual[impact.row$test=="A"], impact.row$memory,visual[impact.row$test=="B"])
cor(impact.row$memory.vismotor[impact.row$test=="A"], impact.row$memory,vismotor[impact.row$test=="B"])
cor(impact.row$memory.general[impact.row$test=="A"], impact.row$memory,general[impact.row$test=="B"])
cor(impact.row$memory.control[impact.row$test=="A"], impact.row$memory,control[impact.row$test=="B"])
library(psych)
#read data
impact.row<-read.table("data/stats.ex.03.row.txt", header=TRUE)
#read data
impact.row<-read.table("data/STATS.EX.03.ROW.txt", header=TRUE)
impact.row<-read.table("data/STATS1.EX.03.ROW.txt", header=TRUE)
# list names of variables
names(impact.row)
describe.by(impact.row, impact.row$test)
cor(impact.row$memory.verbal[impact.row$test=="A"], impact.row$memory,verbal[impact.row$test=="B"])
cor(impact.row$memory.visual[impact.row$test=="A"], impact.row$memory,visual[impact.row$test=="B"])
cor(impact.row$memory.vismotor[impact.row$test=="A"], impact.row$memory,vismotor[impact.row$test=="B"])
cor(impact.row$memory.general[impact.row$test=="A"], impact.row$memory,general[impact.row$test=="B"])
cor(impact.row$memory.control[impact.row$test=="A"], impact.row$memory,control[impact.row$test=="B"])
cor(impact.row$memory.verbal[impact.row$test=="A"], impact.row$memory.verbal[impact.row$test=="B"])
cor(impact.row$memory.visual[impact.row$test=="A"], impact.row$memory.visual[impact.row$test=="B"])
cor(impact.row$memory.vismotor[impact.row$test=="A"], impact.row$memory.vismotor[impact.row$test=="B"])
cor(impact.row$memory.general[impact.row$test=="A"], impact.row$memory.general[impact.row$test=="B"])
cor(impact.row$memory.control[impact.row$test=="A"], impact.row$memory.control[impact.row$test=="B"])
# Statistics One, lecture 6.2
# Test/retest reliability analysis in R
# (row format)
library(psych)
#read data
impact.row<-read.table("data/STATS1.EX.03.ROW.txt", header=TRUE)
# list names of variables
names(impact.row)
describe.by(impact.row, impact.row$test)
# Correlations (TestA and TestB)
cor(impact.row$memory.verbal[impact.row$test=="A"], impact.row$memory.verbal[impact.row$test=="B"])
cor(impact.row$memory.visual[impact.row$test=="A"], impact.row$memory.visual[impact.row$test=="B"])
cor(impact.row$speed.vismotor[impact.row$test=="A"], impact.row$speed.vismotor[impact.row$test=="B"])
cor(impact.row$speed.general[impact.row$test=="A"], impact.row$speed.general[impact.row$test=="B"])
cor(impact.row$impulse.control[impact.row$test=="A"], impact.row$impulse.control[impact.row$test=="B"])
t<-read.table("data/DAA.02.txt", header=TRUE)
# Provides descriptive statistics for all 8 measures, for each condition.
describe(t)
decribe.by(t, t$cond)
library(psych)
#read data
t<-read.table("data/DAA.02.txt", header=TRUE)
# Provides descriptive statistics for all 8 measures, for each condition.
describe(t)
decribe.by(t, t$cond)
library(psych)
#read data
impact.row<-read.table("data/STATS1.EX.03.ROW.txt", header=TRUE)
# list names of variables
names(impact.row)
describe.by(impact.row, impact.row$test)
describe.by(t, t$cond)
describe.by(t$pre.wm.s1, t$cond)
cor(t)
cor(t)
library(psych)
impact<-read.table("STATS.EX.02.TXT", header=TRUE)
class(impact)
names(impact)
describe(impact)
library(psych)
impact<-read.table("STATS.EX.02.TXT", header=TRUE)
class(impact)
names(impact)
describe(impact)
library(psych)
impact<-read.table("data/STATS1.EX.02.TXT", header=TRUE)
class(impact)
names(impact)
describe(impact)
hist(impact$memory.visual, xlab="Visual Memory", main="Histogram", col="red")
plot(impact$memory.verbal ~ impact$memory.visual, main="Scatterplot",
ylab="Verbal memory", xlab="Visual memmory")
abline(lm(impact$memory.verbal ~ impact$memory.visual), col="blue")
#get correlation:
cor(impact$memory.verbal, impact$memory.visual)
#testing for significance:
cor.test(impact$memory.verbal, impact$memory.visual)
#all correlations in a matrix:
cor(impact)
cor(impact)
describe(t)
cor(t)
library(psych)
#read data
t<-read.table("data/DAA.02.txt", header=TRUE)
# Provides descriptive statistics for all 8 measures, for each condition.
describe(t)
describe.by(t, t$cond)
# Provides an 8x8 correlation matrix, for each condition.
cor(t)
library(psych)
#read data
t<-read.table("data/DAA.02.txt", header=TRUE)
# Provides descriptive statistics for all 8 measures, for each condition.
describe(t)
describe.by(t, t$cond)
# Provides an 8x8 correlation matrix, for each condition.
cor(t)
?cor
cor(t[t$cond=="DES"])
cor(t[t$cond=="des"])
des=split(t, t$cond)
describe(des)
describe(des[1])
names(des)
des
splitted=split(t, t$cond)
des=splitted$des
aer=splitted$aer
cor(des)
des<-des[2:8]
describe(des)
splitted=split(t, t$cond)
des=splitted$des
aer=splitted$aer
des<-des[3:12]
describe(des)
splitted=split(t, t$cond)
des=splitted$des
aer=splitted$aer
names(des)
des<-des[3:10]
names(des)
splitted=split(t, t$cond)
des=splitted$des
aer=splitted$aer
des<-des[3:10]
aer<-aer[3:10]
cor(des)
cor(aer)
splitted=split(t, t$cond)
des=splitted$des
aer=splitted$aer
des<-des[3:10]
aer<-aer[3:10]
cor(des)
cor(aer)
cor(des$pre.wm.s1, des$pre.wm.s2)
# compare the two test runs with each other
cor(des$pre.wm.s1, des$pre.wm.s2)
cor(des$pre.wm.v1, des$pre.wm.v2)
cor(aer$pre.wm.s1, aer$pre.wm.s2)
cor(aer$pre.wm.v1, aer$pre.wm.v2)
cor(aer$pre.wm.s1, aer$post.wm.s1)
cor(aer$pre.wm.v1, aer$post.wm.v1)
cor(aer$pre.wm.s2, aer$post.wm.s2)
cor(aer$pre.wm.v2, aer$post.wm.v2)
cor(des$pre.wm.s1, des$post.wm.s1)
cor(des$pre.wm.v1, des$post.wm.v1)
cor(des$pre.wm.s2, des$post.wm.s2)
cor(des$pre.wm.v2, des$post.wm.v2)
# compare the two test runs with each other
cor(des$pre.wm.s1, des$pre.wm.s2)
cor(des$pre.wm.v1, des$pre.wm.v2)
cor(aer$pre.wm.s1, aer$pre.wm.s2)
cor(aer$pre.wm.v1, aer$pre.wm.v2)
cor(des)
cor(aer)
describe.by(t, t$cond)
cor(des$pre.wm.s1, des$pre.wm.s2)
cor(des$pre.wm.v1, des$pre.wm.v2)
cor(aer$pre.wm.s1, aer$pre.wm.s2)
cor(aer$pre.wm.v1, aer$pre.wm.v2)
cor(aer$pre.wm.s1, aer$post.wm.s1)
cor(aer$pre.wm.v1, aer$post.wm.v1)
cor(aer$pre.wm.s2, aer$post.wm.s2)
cor(aer$pre.wm.v2, aer$post.wm.v2)
cor(des$pre.wm.s1, des$post.wm.s1)
cor(des$pre.wm.v1, des$post.wm.v1)
cor(des$pre.wm.s2, des$post.wm.s2)
cor(des$pre.wm.v2, des$post.wm.v2)
?pnorm
example(pnorm)
?pnorm
pnorm(c(0, 0.1), mean=0.5, sd=0.1)
pnorm(c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1), mean=0.5, sd=0.1)
pnorm(0.1, mean=0.05, sd=0.1)
1- pnorm(0.1, mean=0.05, sd=0.1)
pnorm(0.1, mean=0.05, sd=0.1)
pnorm(-0.1, mean=0.05, sd=0.1)
dnorm(c(-0.05, 0.15), mean=0.05, sd=0.1)
pnorm(c(-0.05, 0.15), mean=0.05, sd=0.1)
x = pnorm(-0.05, mean=0.05, sd=0.1)
y = pnorm(0.15, mean=0.05, sd=0.1)
x
y
y-x
qnorm(0.01, mean=0.05, sd=0.1)
qnorm(0.11, mean=0.05, sd=0.1)
qnorm(0.5, mean=0.05, sd=0.1)
qnorm(0.01, mean=0.05, sd=0.1)
qnorm(0.05, mean=0.05, sd=0.1)
qnorm(0.95, mean=0.05, sd=0.1)
qnorm(0.99, mean=0.05, sd=0.1)
?plot
intervals <- seq(-0.25, 0.35,length=100)
hx <- dnorm(intervals,0.05,0.1)
hy <- dnorm(intervals,0.025,0.05)
plot(intervals, hx)
plot(intervals, hx, type==n)
plot(intervals, hx, type=n)
plot(intervals, hx, type=l)
plot(intervals, hx, type="l")
plot(intervals, hx, type="l")
col(red)
plot(intervals, hx, type="l")
plot(intervals, hx, type="l", col="blue")
intervals <- seq(-0.25, 0.35,length=100)
hx <- dnorm(intervals,0.05,0.1)
hy <- dnorm(intervals,0.025,0.05)
plot(intervals, hx, type="l", col="blue")
intervals <- seq(-0.25, 0.35,length=100)
hx <- dnorm(intervals,0.05,0.1)
hy <- dnorm(intervals,0.025,0.05)
plot(intervals, hx, type="l", col="blue")
lines(intervals, hy, type="l", col="green")
intervals <- seq(-0.25, 0.35,length=100)
hx <- dnorm(intervals,0.05,0.1)
hy <- dnorm(intervals,0.025,0.05)
plot(intervals, hx, type="l", col="blue")
lines(intervals, hy, type="l", col="green")
w0 = 100000
pnorm(0.01, mean=0.04, sd=0.09) * w0
pnorm(0.05, mean=0.04, sd=0.09) * w0
pnorm(0.01, mean=0.04, sd=0.09) * w0 / 12
pnorm(0.05, mean=0.04, sd=0.09) * w0 /12
w0 = 100000
qnorm(0.01, mean=0.04, sd=0.09) * w0
qnorm(0.05, mean=0.04, sd=0.09) * w0
w0 = 100000;
# R = (e^r) -1 <=> r = ln(1+R)
R.01 = qnorm(0.01, mean=0.04, sd=0.09)
R.05 = qnorm(0.05, mean=0.04, sd=0.09)
r.01 = ln(1+R.01)
r.05 = ln(1+R.05)
r.01*w0
r.05*w0
w0 = 100000;
# R = (e^r) -1 <=> r = ln(1+R)
R.01 = qnorm(0.01, mean=0.04, sd=0.09)
R.05 = qnorm(0.05, mean=0.04, sd=0.09)
r.01 = logn(1+R.01)
r.05 = logn(1+R.05)
r.01*w0
r.05*w0
w0 = 100000;
# R = (e^r) -1 <=> r = ln(1+R)
R.01 = qnorm(0.01, mean=0.04, sd=0.09)
R.05 = qnorm(0.05, mean=0.04, sd=0.09)
r.01 = log(1+R.01)
r.05 = log(1+R.05)
r.01*w0
r.05*w0
w0 = 100000;
# R = (e^r) -1 <=> r = ln(1+R)
r.01 = qnorm(0.01, mean=0.04, sd=0.09)
r.05 = qnorm(0.05, mean=0.04, sd=0.09)
R.01 = exp(r.01)
R.05 = exp(r.05)
R.01*w0
R.05*w0
w0 = 100000;
# R = (e^r) -1 <=> r = ln(1+R)
r.01 = qnorm(0.01, mean=0.04, sd=0.09)
r.05 = qnorm(0.05, mean=0.04, sd=0.09)
R.01 = exp(r.01)
R.05 = exp(r.05)
R.01*w0
R.05*w0
w0 = 100000;
# R = (e^r) -1 <=> r = ln(1+R)
r.01 = qnorm(0.01, mean=0.04, sd=0.09)
r.05 = qnorm(0.05, mean=0.04, sd=0.09)
R.01 = exp(r.01) -1
R.05 = exp(r.05) -1
R.01*w0
R.05*w0
(41.29 - 38.23) / 38.23
(41.29 - 41.11) / 41.11
(41.29 - 38.23) / 38.23
(41.74 - 41.11) / 41.11
r.A = (41.29 - 38.23) / 38.23
r.C = (41.74 - 41.11) / 41.11
# Question 12
# What are the continuously compounded returns for the two stocks?
R.A = exp(r.A)-1
R.C = exp(r.C)-1
R.A
R.C
R.A = (41.29 - 38.23) / 38.23
R.C = (41.74 - 41.11) / 41.11
# Question 12
# What are the continuously compounded returns for the two stocks?
r.A = log(1 + R.A)
r.C = log(1 + R.C)
r.A
r.C
Rsimple = (41.29 + 0.1 - 38.23) / 38.23
Rsimple
Rsimple = (41.29 + 0.1 - 38.23) / 38.23
divYield = 0.01 / 38.23
Rsimple
divYield
Rsimple = (41.29 + 0.1 - 38.23) / 38.23
divYield = 0.01 / 38.23
Rsimple * 100
divYield * 100
R.month = (41.29 - 38.23) / 38.23
R.year = ((1+R.month)^12) -1
R.year
R.year*100+ "%"
R.year*100
R.month = (41.29 - 38.23) / 38.23
R.year = ((1+R.month)^12) -1
R.year*100
r.year = log(1+R.year)
r.year*100
R.A = (41.29 - 38.23) / 38.23
R.C = (41.74 - 41.11) / 41.11
R.total = 0.8 * R.A + 0.2*R.C
R.total*100
save.image("C:/workspaces/R/.RData")
# Question 2
# Unstandardized regression coefficient for age, predicting endurance
lm(fit$endurance ~ fit$age)
# Question 3
# Standardized regression coefficient for age, predicting endurance
lm(scale(fit$endurance) ~ scale(fit$age))
# Question 4
# Unstandardized regression coefficient for age, predicting endurance (while also using activeyears to predict endurance)
lm(fit$endurance ~ fit$age + fit$activeyears)
# Question 5
# Standardized regression coefficient for age, predicting endurance (while also using activeyears to predict endurance)
lm(scale(fit$endurance) ~ scale(fit$age) + scale(fit$activeyears))
# Question 6
# Correlation between activeyears and endurance
cor(fit$activeyears, fit$endurance)
# Question 7
# Unstandardized regression coefficient for activeyears, predicting endurance
lm(fit$endurance ~ fit$activeyears)
# Question 8
# Standardized regression coefficient for activeyears, predicting endurance
lm(scale(fit$endurance) ~ scale(fit$activeyears))
# Question 9
# Unstandardized regression coefficient for activeyears, predicting endurance (while also using age to predict endurance)
lm(scale(fit$endurance) ~ scale(fit$activeyears) + scale(fit$age))
# Question 10
# Standardized regression coefficient for activeyears, predicting endurance (while also using age to predict endurance)
lm(scale(fit$endurance) ~ scale(fit$age) + scale(fit$activeyears))
# Statistics 1, Assignment 3
# Paul-Gabriel Müller
library(psych)
options(scipen=20, digits =4)
fit<-read.table("data/DAA.03.txt", header = TRUE)
# Question 1
# Correlation between age and endurance
cor(fit$age, fit$endurance)
# Question 2
# Unstandardized regression coefficient for age, predicting endurance
lm(fit$endurance ~ fit$age)
# Question 3
# Standardized regression coefficient for age, predicting endurance
lm(scale(fit$endurance) ~ scale(fit$age))
# Question 4
# Unstandardized regression coefficient for age, predicting endurance (while also using activeyears to predict endurance)
lm(fit$endurance ~ fit$age + fit$activeyears)
# Question 5
# Standardized regression coefficient for age, predicting endurance (while also using activeyears to predict endurance)
lm(scale(fit$endurance) ~ scale(fit$age) + scale(fit$activeyears))
# Question 6
# Correlation between activeyears and endurance
cor(fit$activeyears, fit$endurance)
# Question 7
# Unstandardized regression coefficient for activeyears, predicting endurance
lm(fit$endurance ~ fit$activeyears)
# Question 8
# Standardized regression coefficient for activeyears, predicting endurance
lm(scale(fit$endurance) ~ scale(fit$activeyears))
# Question 9
# Unstandardized regression coefficient for activeyears, predicting endurance (while also using age to predict endurance)
lm(scale(fit$endurance) ~ scale(fit$activeyears) + scale(fit$age))
# Question 10
# Standardized regression coefficient for activeyears, predicting endurance (while also using age to predict endurance)
lm(scale(fit$endurance) ~ scale(fit$age) + scale(fit$activeyears))
lm(fit$endurance ~ fit$activeyears + fit$age)
